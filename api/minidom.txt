def MiniDom(ruta):
    mydoc = minidom.parse(ruta)

    #ciudades del archivo
    ciudad = mydoc.getElementsByTagName('ciudad')
    for c in ciudad: 
        noUC = 0 #número de unidades civiles en la ciudad / validación para misión de rescate
        noR = 0 #número de recursos en la ciudad / validación para misión de extracción

        # AGREGAR UNA NUEVA CIUDAD ----------------- 
        nombre = c.getElementsByTagName('nombre')
        for n in nombre:

            nombreCiudad = n.firstChild.data
            nF = int(n.attributes['filas'].value)
            nC = int(n.attributes['columnas'].value)

            nuevaCiudad = ListaCiudades.insertarCiudad(nF, nC, nombreCiudad)
        
        filas = c.getElementsByTagName('fila')
        posX = 0
        posY = 1
        tipo = ''
        for f in filas:
            posX = int(f.attributes['numero'].value)
            cadena = f.firstChild.data
            cadena = cadena.replace('"', '')

            for ca in cadena:
                if ca == '*':
                    tipo = 'CI'
                elif ca == ' ':
                    tipo = 'CT'
                elif ca == 'E':
                    tipo = 'PE'
                elif ca == 'C':
                    tipo = 'C'
                    noUC += 1
                elif ca == 'R':
                    tipo = 'R'
                    noR += 1
                else:
                    pass
                
                nuevaCiudad.matriz.insertar(posX, posY, tipo)

                if posY < nC:
                    posY += 1
                else:
                    posY = 1

        unidadMilitar = c.getElementsByTagName('unidadMilitar')
        for um in unidadMilitar:
            iFila = int(um.attributes['fila'].value)
            iColumna = int(um.attributes['columna'].value)
            capacidad = um.firstChild.data
            tipo = 'UM'

            nuevaCiudad.matriz.ubicarCoordenada(iFila, iColumna, capacidad, tipo)  

        nuevaCiudad.setNoUC(noUC)
        nuevaCiudad.setNoRecursos(noR)
    
    #robots del archivo
        robot = mydoc.getElementsByTagName('robot')
        if robot != None:
            noCF = nuevaCiudad.noChapinF
            noCR = nuevaCiudad.noChapinR

            for r in robot:

                capacidadR = 0

                nombreR = r.getElementsByTagName('nombre')
                for nR in nombreR:
                    nombreRobot = nR.firstChild.data
                    tipoRobot = nR.attributes['tipo'].value
                    if tipoRobot == "ChapinFighter":
                        capacidadR = nR.attributes['capacidad'].value
                        noCF += 1
                    else:
                        capacidadR = 0
                        noCR += 1

                    nuevaCiudad.robots.insertarRobot(nombreRobot, tipoRobot, capacidadR)
                ListaRobots.insertarRobot(nombreRobot, tipoRobot, capacidadR)
                    
            nuevaCiudad.setNoChapinF(noCF)
            nuevaCiudad.setNoChapinR(noCR)
        else:
            print("No hay etiquetas de robot en el xml.")
            
            

    print("\n╔═══════ LISTA DE CIUDADES ═══════╗")
    ListaCiudades.mostrarCiudades()
    print("╚═══════════════════════════════════╝")

    print("\n╔═══════ LISTA DE ROBOTS ═══════╗")
    nuevaCiudad.robots.mostrarRobots()
    print("╚═════════════════════════════════╝")






    @app.route('/add', method=['POST'])
def add_solicitud():
    xml = request.data.decode('utf-8')
    print(xml)
    return jsonify({'msg':'Archivo XML cargado correctamente :D'}), 200


    
    

    